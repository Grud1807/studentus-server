import os
import logging
from flask import Flask, request, jsonify
from flask_cors import CORS
import requests

# ===== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====
AIRTABLE_API_KEY = os.getenv("AIRTABLE_API_KEY", "patZ7hX8W8F8apmJm.9adf2ed71f8925dd372af08a5b5af2af4b12ead4abc0036be4ea68c43c47a8c4")
AIRTABLE_BASE_ID = os.getenv("AIRTABLE_BASE_ID", "appTpq4tdeQ27uxQ9")
AIRTABLE_TABLE_NAME = os.getenv("AIRTABLE_TABLE_NAME", "Tasks")
AIRTABLE_URL = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"

# ===== Flask =====
app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞

logging.basicConfig(level=logging.INFO)


@app.route("/add-task", methods=["POST"])
def add_task():
    try:
        data = request.get_json(force=True)
        logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["user_id", "username", "subject", "description", "price", "deadline"]
        for field in required_fields:
            if not data.get(field):
                return jsonify({"success": False, "error": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}"}), 400

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ Airtable
        airtable_data = {
            "fields": {
                "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": str(data["user_id"]),
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram": str(data["username"]),
                "–ü—Ä–µ–¥–º–µ—Ç": str(data["subject"]),
                "–û–ø–∏—Å–∞–Ω–∏–µ": str(data["description"]),
                "–¶–µ–Ω–∞": str(data["price"]),
                "–î–µ–¥–ª–∞–π–Ω": str(data["deadline"]),
                "–°—Ç–∞—Ç—É—Å": "–ù–æ–≤–æ–µ"
            }
        }

        # –ó–∞–ø—Ä–æ—Å –≤ Airtable
        headers = {
            "Authorization": f"Bearer {AIRTABLE_API_KEY}",
            "Content-Type": "application/json"
        }
        response = requests.post(AIRTABLE_URL, json=airtable_data, headers=headers)

        if response.status_code != 200:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ Airtable {response.status_code}: {response.text}")
            return jsonify({
                "success": False,
                "error": f"Airtable error {response.status_code}",
                "details": response.json()
            }), 500

        logging.info("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Airtable")
        return jsonify({"success": True, "message": "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!"})

    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        return jsonify({"success": False, "error": str(e)}), 500


@app.route("/", methods=["GET"])
def index():
    return jsonify({"message": "Studentus API —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"})


if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
