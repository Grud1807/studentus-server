import os
import logging
import requests
from flask import Flask, request, jsonify
from flask_cors import CORS

# ---------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------
AIRTABLE_API_KEY = "patZ7hX8W8F8apmJm.9adf2ed71f8925dd372af08a5b5af2af4b12ead4abc0036be4ea68c43c47a8c4"
AIRTABLE_BASE_ID = "appTpq4tdeQ27uxQ9"
AIRTABLE_TABLE_NAME = "Tasks"
AIRTABLE_URL = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
HEADERS = {
    "Authorization": f"Bearer {AIRTABLE_API_KEY}",
    "Content-Type": "application/json"
}

# ---------------- –õ–û–ì–ò ----------------
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ---------------- Flask ----------------
app = Flask(__name__)
# –†–∞–∑—Ä–µ—à–∞–µ–º CORS —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞
CORS(app, resources={r"/*": {"origins": "https://grud1807.github.io"}})

# ---------- –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° AIRTABLE ----------
def airtable_create_record(fields):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Airtable"""
    response = requests.post(AIRTABLE_URL, headers=HEADERS, json={"fields": fields})
    response.raise_for_status()
    return response.json()

def airtable_update_record(record_id, fields):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Airtable"""
    url = f"{AIRTABLE_URL}/{record_id}"
    response = requests.patch(url, headers=HEADERS, json={"fields": fields})
    response.raise_for_status()
    return response.json()

def airtable_find_task_by_id(unique_id):
    """–ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏—è –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID"""
    params = {"filterByFormula": f"{{–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID}}={unique_id}"}
    response = requests.get(AIRTABLE_URL, headers=HEADERS, params=params)
    response.raise_for_status()
    records = response.json().get("records", [])
    return records[0] if records else None

# ---------- API –†–û–£–¢–´ ----------
@app.route("/")
def home():
    return "App.py —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"

@app.route("/add-task", methods=["POST"])
def add_task():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ Airtable"""
    data = request.json
    try:
        fields = {
            "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID": int(data["unique_id"]),
            "–ü—Ä–µ–¥–º–µ—Ç": data["subject"],
            "–û–ø–∏—Å–∞–Ω–∏–µ": data["description"],
            "–¶–µ–Ω–∞": int(data["price"]),
            "–î–µ–¥–ª–∞–π–Ω": data["deadline"],
            "ID –∑–∞–∫–∞–∑—á–∏–∫–∞": int(data["customer_id"]),
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram": data["customer_tg"],
            "–°—Ç–∞—Ç—É—Å": "–ù–æ–≤–æ–µ",
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞": "–ù–µ—Ç",
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è": "–ù–µ—Ç",
            "ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è": "",
            "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å Telegram": "",
        }
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Airtable: {fields}")
        record = airtable_create_record(fields)
        return jsonify({"success": True, "id": record.get("id")})

    except requests.exceptions.HTTPError as http_err:
        logging.error(f"–û—à–∏–±–∫–∞ Airtable HTTP: {http_err.response.text}")
        return jsonify({"success": False, "error": http_err.response.text}), 500
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route("/take-task", methods=["POST"])
def take_task():
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –±–µ—Ä–µ—Ç –∑–∞–¥–∞–Ω–∏–µ"""
    data = request.json
    try:
        unique_id = int(data["unique_id"])
        executor_id = int(data["executor_id"])
        executor_tg = data["executor_tg"]

        task = airtable_find_task_by_id(unique_id)
        if not task:
            return jsonify({"success": False, "error": "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}), 404

        record_id = task["id"]
        airtable_update_record(record_id, {
            "ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è": executor_id,
            "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å Telegram": executor_tg,
            "–°—Ç–∞—Ç—É—Å": "–í —Ä–∞–±–æ—Ç–µ"
        })
        return jsonify({"success": True})

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route("/confirm-task", methods=["POST"])
def confirm_task():
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    data = request.json
    try:
        unique_id = int(data["unique_id"])
        role = data["role"]

        task = airtable_find_task_by_id(unique_id)
        if not task:return jsonify({"success": False, "error": "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}), 404

        record_id = task["id"]
        fields = task["fields"]

        if role == "executor":
            airtable_update_record(record_id, {"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è": "–î–∞"})
        elif role == "customer":
            airtable_update_record(record_id, {"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞": "–î–∞"})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        updated_task = airtable_find_task_by_id(unique_id)
        flds = updated_task["fields"]
        if flds.get("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è") == "–î–∞" and flds.get("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞") == "–î–∞":
            airtable_update_record(record_id, {"–°—Ç–∞—Ç—É—Å": "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"})

        return jsonify({"success": True})

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

