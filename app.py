from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import logging

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8101750587:AAEoO1Aote7wHIRDADD4kpwFyYOYIkibe_c"
AIRTABLE_API_KEY = "patZ7hX8W8F8apmJm.9adf2ed71f8925dd372af08a5b5af2af4b12ead4abc0036be4ea68c43c47a8c4"
AIRTABLE_BASE_ID = "appTpq4tdeQ27uxQ9"
AIRTABLE_TABLE_NAME = "Tasks"
AIRTABLE_URL = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "https://grud1807.github.io"}})
logging.basicConfig(level=logging.INFO)

# ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(user_id, text):
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": user_id,
            "text": text,
            "parse_mode": "Markdown"
        }
        response = requests.post(url, json=payload)
        logging.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {response.status_code} {response.text}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")

# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
@app.route("/add-task", methods=["POST"])
def add_task():
    try:
        data = request.json
        logging.info(f"üì• –ó–∞–¥–∞–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {data}")

        subject = data.get("subject", "")
        description = data.get("description", "")
        deadline = data.get("deadline", "")
        user_id = data.get("user_id", "")
        username = data.get("username", "")

        try:
            price = int(data.get("price", 0))
        except ValueError:
            return jsonify({"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞"}), 400

        airtable_data = {
            "fields": {
                "–ü—Ä–µ–¥–º–µ—Ç": subject,
                "–û–ø–∏—Å–∞–Ω–∏–µ": description,
                "–¶–µ–Ω–∞": price,
                "–î–µ–¥–ª–∞–π–Ω": deadline,
                "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": user_id,
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram": username,
                "–°—Ç–∞—Ç—É—Å": "–ù–æ–≤–æ–µ"
            }
        }

        headers = {
            "Authorization": f"Bearer {AIRTABLE_API_KEY}",
            "Content-Type": "application/json"
        }

        response = requests.post(AIRTABLE_URL, headers=headers, json=airtable_data)
        logging.info(f"üì§ –û—Ç–≤–µ—Ç Airtable: {response.status_code} {response.text}")

        if response.status_code in [200, 201]:
            send_telegram_message(user_id, "‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –µ–≥–æ –≤–æ–∑—å–º—É—Ç –≤ —Ä–∞–±–æ—Ç—É.")
            return jsonify({"success": True})
        else:
            return jsonify({"success": False, "error": response.text}), 400
    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")
        return jsonify({"success": False, "error": str(e)}), 500

# ‚úÖ –í–∑—è—Ç–∏–µ –∑–∞–¥–∞–Ω–∏—è
@app.route("/take-task", methods=["POST"])
def take_task():
    try:
        data = request.json
        record_id = data.get("record_id")
        executor_id = data.get("executor_id")
        executor_username = data.get("executor_username")

        if not record_id or not executor_id:
            return jsonify({"success": False, "error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400

        headers = {
            "Authorization": f"Bearer {AIRTABLE_API_KEY}",
            "Content-Type": "application/json"
        }

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        get_resp = requests.get(f"{AIRTABLE_URL}/{record_id}", headers=headers)
        if get_resp.status_code != 200:
            return jsonify({"success": False, "error": "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}), 404

        task = get_resp.json()["fields"]
        customer_id = task.get("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        customer_username = task.get("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        subject = task.get("–ü—Ä–µ–¥–º–µ—Ç", "")
        description = task.get("–û–ø–∏—Å–∞–Ω–∏–µ", "")
        price = task.get("–¶–µ–Ω–∞", "")
        deadline = task.get("–î–µ–¥–ª–∞–π–Ω", "")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        update_data = {
            "fields": {
                "–°—Ç–∞—Ç—É—Å": "–í —Ä–∞–±–æ—Ç–µ",
                "ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è": executor_id,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞": "–ù–µ—Ç",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è": "–ù–µ—Ç"
            }
        }

        patch_resp = requests.patch(f"{AIRTABLE_URL}/{record_id}", headers=headers, json=update_data)
        logging.info(f"üì¶ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ {record_id} | –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_username} (ID: {executor_id})")

        if patch_resp.status_code in [200, 201]:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
            send_telegram_message(
                executor_id,
                f"üìö –í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ:\n\n*{subject}*\nüìù {description}\nüí∞ {price} ‚ÇΩ\n‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline}\n\nüë§ –ó–∞–∫–∞–∑—á–∏–∫: @{customer_username}\n\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ *'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ'*."
            )

            # –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
            send_telegram_message(
                customer_id,
                f"‚úÖ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É!\n\n*{subject}*\nüìù {description}\nüí∞ {price} ‚ÇΩ\n‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline}\n\nüë®üíª –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{executor_username}\n\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ *'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ'*."
            )

            return jsonify({"success": True})
        else:
            return jsonify({"success": False, "error": patch_resp.text}), 400

    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–¥–∞–Ω–∏—è")
        return jsonify({"success": False, "error": str(e)}), 500

# ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)
